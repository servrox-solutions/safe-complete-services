apiVersion: v1
kind: Service
metadata:
  name: config
  labels:
    service: config
spec:
  selector:
    app: config
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: config
  labels:
    service: config
spec:
  replicas: 1
  selector:
    matchLabels:
      app: config
  template:
    metadata:
      annotations:
        # enforce pod restart when nginx config changes
        checksum/proxy-config: {{ .Files.Get "files/config-service/nginx.conf.template" | sha256sum }}
      labels:
        app: config
    spec:
      initContainers:
        - name: db-create
          image: {{ include "safe.postgresql-util-image" . }}
          command: [ bash ]
          args:
            - -c
            - |
              while ! pg_isready; do
                echo waiting for postgres to become ready
                sleep 1
              done
              createdb config_service || true
          env:
            - name: PGHOST
              value: postgresql
            - name: PGUSER
              value: postgres
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgresql
                  key: postgres-password
      containers:
        - name: django
          image: {{ .Values.config_service.image.name }}:{{ .Values.config_service.image.tag }}
          command: [bash]
          args:
            - -c
            - |
              # create superuser after db migration
              sed -i "/^python src\/manage.py migrate .*/a python src\/manage.py createsuperuser --noinput || true" docker-entrypoint.sh
              
              # run original docker entrypoint
              exec /usr/bin/tini -- ./docker-entrypoint.sh
          env:
            {{- with .Values.config_service }}
            - name: DEBUG
              value: {{ .django.debug | quote }}
            - name: DOCKER_NGINX_VOLUME_ROOT
              value: /static
            - name: POSTGRES_HOST
              value: postgresql
            - name: POSTGRES_NAME
              value: config_service
            - name: POSTGRES_USER
              value: postgres
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgresql
                  key: postgres-password
            - name: GUNICORN_BIND_SOCKET
              value: "unix:/gunicorn/gunicorn.socket"
            - name: GUNICORN_BIND_PORT
              value: "8000"
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: config-service
                  key: secret-key
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            # allow pod ip for readiness probes
            - name: DJANGO_ALLOWED_HOSTS
              value: {{ join "," (list .hostname "$(POD_IP)") }}
            - name: DJANGO_SUPERUSER_USERNAME
              value: {{ .django.superuser.username | quote }}
            - name: DJANGO_SUPERUSER_EMAIL
              value: {{ .django.superuser.email | quote }}
            - name: DJANGO_SUPERUSER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: config-service
                  key: django-superuser-password
            - name: CSRF_TRUSTED_ORIGINS
              value: {{ print "https://" .hostname | quote }}
            {{- end }}
          resources:
            requests:
              cpu: 100m
              memory: 200Mi
            limits:
              cpu: 500m
              memory: 1000Mi
          volumeMounts:
            - name: staticfiles
              mountPath: /static
            - name: gunicorn
              mountPath: /gunicorn

        - name: nginx
          image: nginx:stable-alpine3.17
          ports:
            - name: http
              containerPort: 80
          env:
            - name: DOCKER_NGINX_VOLUME_ROOT
              value: /www
            - name: GUNICORN_BIND_SOCKET
              value: unix:/gunicorn/gunicorn.socket
            - name: NGINX_ENVSUBST_OUTPUT_DIR
              value: /etc/nginx
          resources:
            requests:
              cpu: 50m
              memory: 50Mi
            limits:
              cpu: 100m
              memory: 150Mi
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/templates
            - name: staticfiles
              mountPath: /nginx
            - name: gunicorn
              mountPath: /gunicorn
          readinessProbe:
            httpGet:
              path: /api/v1/about/
              port: http
            initialDelaySeconds: 15
      volumes:
        - name: nginx-config
          configMap:
            name: config-service-nginx
        - name: staticfiles
          emptyDir: {}
        - name: gunicorn
          emptyDir: {}


---
apiVersion: v1
kind: ConfigMap
metadata:
  name: config-service-nginx
  labels:
    app: config
data:
  nginx.conf.template: |-
{{ .Files.Get "files/config-service/nginx.conf.template" | indent 4 }}


---
apiVersion: v1
kind: Secret
metadata:
  name: config-service
  annotations:
    "helm.sh/resource-policy": keep
data:
  {{- $secretObj := (lookup "v1" "Secret" .Release.Namespace "config-service") | default dict }}
  {{- $secretData := (get $secretObj "data") | default dict }}
  {{- $secretKey := (get $secretData "secret-key") | default (randAlphaNum 128 | b64enc) }}
  secret-key: {{ $secretKey | quote }}
  {{- $djangoSuperuserPassword := (get $secretData "django-superuser-password") | default (randAlphaNum 32 | b64enc) }}
  django-superuser-password: {{ $djangoSuperuserPassword | quote }}
